import { Markup, Scenes } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { UserService } from "../services/user.service";
import { ClanService } from "../services/clan.service";

export const clanScene = new Scenes.BaseScene<IBotContext>("clan");

clanScene.enter(ctx => {
    console.log("inside clan");
    displayClan(ctx)
});

const displayClan = async (ctx: IBotContext) => {
    if (!ctx.from) {
        return;
    }
    console.log("inside clan before reload");
    await ClanService.updateClanLevels()
    const clanDetails = await UserService.checkForClan(ctx.from.id);
    if (!clanDetails) {
        return;
    }
    if (clanDetails.isInClan && clanDetails.clanDetails) {
        const isAdmin = ctx.from.id === clanDetails.clanDetails?.administrator.id;
        let text = `üëë${clanDetails.clanDetails.name}\n\nüìú${clanDetails.clanDetails.description}\nüëäüèª–°–∏–ª–∞ –∫–ª–∞–Ω–∞:${clanDetails.clanDetails.level}`;
        text += isAdmin ? "\n–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "";
        const keyboard = [];

        if (isAdmin) {
            keyboard.push([Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'manage_clan')]);
        }

        keyboard.push(
            [Markup.button.callback('–£—á–∞—Å—Ç–Ω–∏–∫–∏', 'view_members'), Markup.button.callback('–ü–æ–∫–∏–Ω—É—Ç—å', 'leave_clan_check')],
            [Markup.button.callback('–õ—É—á—à–∏–µ –∫–ª–∞–Ω—ã', 'leaderboard'), Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'back_to_menu')]
        );

        ctx.reply(text, Markup.inlineKeyboard(keyboard));
    } else {
        let text = "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!\n";
        const keyboard = [];
        keyboard.push(
            [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω', 'create_clan'), Markup.button.callback('–õ—É—á—à–∏–µ –∫–ª–∞–Ω—ã', 'leaderboard')],
            [Markup.button.callback('–ù–∞–∑–∞–¥', 'back_to_menu')]
        );

        ctx.reply(text, Markup.inlineKeyboard(keyboard));
    }
}


clanScene.action('create_clan', async ctx => {
    ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    ctx.scene.leave();
    ctx.scene.enter("create_clan");
});

clanScene.action('view_members', async (ctx) => {
    const page = 1; 
    await displayMembersPage(ctx, page);
});

const ITEMS_PER_PAGE = 5;

const displayMembersPage = async (ctx: IBotContext, page: number) => {
    if (!ctx.from) {
        return;
    }
    const clanDetails = await UserService.checkForClan(ctx.from.id);
    if (!clanDetails || !clanDetails.clanDetails) {
        return;
    }
    const offset = (page - 1) * ITEMS_PER_PAGE;
    const members = await ClanService.getClanMembers(clanDetails.clanDetails.id, offset, ITEMS_PER_PAGE + 1);
    let text = `–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}\n\n`;

    const memberButtons = members.slice(0, ITEMS_PER_PAGE).map(member =>
        Markup.button.callback(`üê∂ ${member.char_name}`, 'noop')
    );

    const memberButtonsInline = memberButtons.map(button => [button]);

    const navigationButtons = [];
    if (page > 1) {
        navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `view_members_prev_${page - 1}`));
    }
    if (members.length > ITEMS_PER_PAGE) {
        navigationButtons.push(Markup.button.callback('‚û°Ô∏è', `view_members_next_${page + 1}`));
    }
    navigationButtons.push(Markup.button.callback('–ù–∞–∑–∞–¥', 'back_to_menu'));

    
    const allButtonsInline = [
        ...memberButtonsInline,
        navigationButtons
    ];

    ctx.editMessageText(text, Markup.inlineKeyboard(allButtonsInline));
};

clanScene.action(/view_members_next_(.+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    await displayMembersPage(ctx, page);
});

clanScene.action(/view_members_prev_(.+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    await displayMembersPage(ctx, page);
});

clanScene.action('back_to_menu', ctx => {
    ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    ctx.scene.leave();
    ctx.scene.enter("fortress");
});

clanScene.action('leave_clan_check', async ctx => {
    const buttons = [];
    buttons.push(Markup.button.callback('–î–∞', 'leave_clan'));
    buttons.push(Markup.button.callback('–ù–µ—Ç', 'back_to_menu'));
    ctx.editMessageText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω?", Markup.inlineKeyboard([buttons])); 
});

clanScene.action('leave_clan', async ctx => {
    if (!ctx.from) {
        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }
    
    try {
        await ClanService.leaveClan(ctx.from.id);
        ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω.");
    } catch (error) {
        console.error(error);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω.");
    }

    ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    ctx.scene.leave();
    ctx.scene.enter("fortress"); 
});


clanScene.action('manage_clan', async ctx => {
    const page = 1; 
    await displayMembersForAdmin(ctx, page);
});

const displayMembersForAdmin = async (ctx: IBotContext, page: number) => {
    if (!ctx.from) {
        return;
    }
    const clanDetails = await UserService.checkForClan(ctx.from.id);
    if (!clanDetails || !clanDetails.clanDetails) {
        return;
    }
    const offset = (page - 1) * ITEMS_PER_PAGE;
    const members = await ClanService.getClanMembers(clanDetails.clanDetails.id, offset, ITEMS_PER_PAGE + 1);
    let text = `–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}\n\n`;

  
    const memberButtons = members.slice(0, ITEMS_PER_PAGE).map(member =>
        Markup.button.callback(`üê∂ ${member.char_name}`, `member_${member.id}`)
    );

  
    const memberButtonsInline = memberButtons.map(button => [button]); 


    const navigationButtons = [];
    if (page > 1) {
        navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `view_members_admin_prev_${page - 1}`));
    }
    if (members.length > ITEMS_PER_PAGE) {
        navigationButtons.push(Markup.button.callback('‚û°Ô∏è',  `view_members_admin_next_${page + 1}`));
    }
    navigationButtons.push(Markup.button.callback('–ù–∞–∑–∞–¥', 'back_to_menu'));


    const allButtonsInline = [
        ...memberButtonsInline, 
        navigationButtons 
    ];

    ctx.editMessageText(text, Markup.inlineKeyboard(allButtonsInline));
};

clanScene.action(/view_members_admin_next_(.+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    await displayMembersForAdmin(ctx, page);
});

clanScene.action(/view_members_admin_prev_(.+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    await displayMembersForAdmin(ctx, page);
});

clanScene.action(/^member_(.+)$/, async (ctx) => {
    const memberId = ctx.match[1];
    const text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
    const buttons = [
        Markup.button.callback('–ò—Å–∫–ª—é—á–∏—Ç—å', `exclude_${memberId}`),
        Markup.button.callback('–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è', `transfer_authority_${memberId}`)
    ];
    await ctx.editMessageText(text, Markup.inlineKeyboard(buttons));
});


clanScene.action(/^exclude_(.+)$/, async (ctx) => {
    const memberId = ctx.match[1];

    try {
        await ClanService.excludeUser(Number(memberId))
        ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    } catch (error) {
        console.error(error);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }


    ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    ctx.scene.leave();
    ctx.scene.enter("fortress"); 
});

clanScene.action(/^transfer_authority_(.+)$/, async (ctx) => {
    const memberId = ctx.match[1];

    try {
        await ClanService.makeAdmin(ctx.from.id, Number(memberId));
        ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–º.");
    } catch (error) {
        console.error(error);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
    }
    ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    ctx.scene.leave();
    ctx.scene.enter("fortress"); 
});

clanScene.action("leaderboard", async (ctx) => {
    try {
        await ClanService.updateClanLevels()
        const clans = await ClanService.getTopClans();

        let messageText = "–õ—É—á—à–∏–µ 10 –∫–ª–∞–Ω–æ–≤:\n\n";
        clans.forEach((clan, index) => {
            messageText += `${index + 1}. ${clan.name} - —É—Ä–æ–≤–µ–Ω—å: ${clan.level}\n`;
        });

        ctx.reply(messageText, Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', "back_to_menu")]));

    } catch (error) {
        console.error("Failed to display leaderboard:");
    }
});